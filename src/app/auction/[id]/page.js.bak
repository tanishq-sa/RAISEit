'use client';

import { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import AuthenticatedNavbar from '@/components/AuthenticatedNavbar';
import Footer from '@/components/Footer';
import { useAuth } from '@/context/AuthContext';

export default function AuctionPage() {
  const params = useParams();
  const id = params.id;
  const { user, isAuthenticated, isAdmin, isBidder, updateFunds, addPlayer } = useAuth();
  const router = useRouter();
  
  const [auction, setAuction] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);
  const [bidAmount, setBidAmount] = useState('');
  const [bidError, setBidError] = useState('');
  const [bidSuccess, setBidSuccess] = useState('');
  const [bids, setBids] = useState([]);
  const [bidHistory, setBidHistory] = useState([]);
  const [bidding, setBidding] = useState(false);
  const [budgetAmount, setBudgetAmount] = useState('');
  const [visibilityStatus, setVisibilityStatus] = useState(true);

  useEffect(() => {
    // Redirect if not authenticated
    if (!isAuthenticated()) {
      router.push('/login?redirect=/auction/' + id);
      return;
    }

    // Fetch auction data
    const fetchAuction = async () => {
      setLoading(true);
      try {
        // Use fetch API instead of direct MongoDB utils
        const response = await fetch(`/api/auctions/${id}`);
        const data = await response.json();
        
        if (!response.ok || !data.auction) {
          setError('Auction not found');
          return;
        }
        
        const auctionData = data.auction;
        setAuction(auctionData);
        setCurrentPlayerIndex(auctionData.currentPlayerIndex || 0);
        setBudgetAmount(auctionData.bidderBudget || 5000);
        setVisibilityStatus(auctionData.isPublic);
        
        // Fetch bids for this auction
        const bidsResponse = await fetch(`/api/bids?auctionId=${id}`);
        const bidsData = await bidsResponse.json();
        setBids(bidsData.bids || []);
        
        // If there are bids for the current player, set the bid amount to the highest bid + 100
        if (auctionData.players && auctionData.players.length > 0) {
          const currentPlayer = auctionData.players[auctionData.currentPlayerIndex || 0];
          if (currentPlayer) {
            const highestBidResponse = await fetch(`/api/bids?auctionId=${id}&playerId=${currentPlayer._id}&highest=true`);
            const highestBidData = await highestBidResponse.json();
            const highestBid = highestBidData.bid;
            
            if (highestBid) {
              setBidAmount(highestBid.amount + 100);
            } else {
              setBidAmount(currentPlayer.basePrice || auctionData.baseValue);
            }
          }
        }
      } catch (err) {
        setError('Failed to load auction data');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchAuction();
  }, [id, isAuthenticated, router]);

  // Function to move to the next player
  const nextPlayer = async () => {
    if (!auction || !auction.players) return;
    
    if (currentPlayerIndex < auction.players.length - 1) {
      const nextIndex = currentPlayerIndex + 1;
      setCurrentPlayerIndex(nextIndex);
      
      // Update the auction in the database
      try {
        const response = await fetch(`/api/auctions/${id}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ currentPlayerIndex: nextIndex })
        });
        
        if (!response.ok) {
          throw new Error('Failed to update auction');
        }
        
        // Reset bid amount to the base price of the next player
        const nextPlayer = auction.players[nextIndex];
        setBidAmount(nextPlayer.basePrice || auction.baseValue);
        
        // Clear bid messages
        setBidError('');
        setBidSuccess('');
        
        // Update the auction object
        setAuction({
          ...auction,
          currentPlayerIndex: nextIndex
        });
      } catch (err) {
        setError('Failed to move to next player');
        console.error(err);
      }
    }
  };

  // Function to go back to the previous player
  const previousPlayer = async () => {
    if (!auction || !auction.players) return;
    
    if (currentPlayerIndex > 0) {
      const prevIndex = currentPlayerIndex - 1;
      setCurrentPlayerIndex(prevIndex);
      
      // Update the auction in the database
      try {
        const response = await fetch(`/api/auctions/${id}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ currentPlayerIndex: prevIndex })
        });
        
        if (!response.ok) {
          throw new Error('Failed to update auction');
        }
        
        // Reset bid amount to the base price of the previous player
        const prevPlayer = auction.players[prevIndex];
        setBidAmount(prevPlayer.basePrice || auction.baseValue);
        
        // Clear bid messages
        setBidError('');
        setBidSuccess('');
        
        // Update the auction object
        setAuction({
          ...auction,
          currentPlayerIndex: prevIndex
        });
      } catch (err) {
        setError('Failed to move to previous player');
        console.error(err);
      }
    }
  };

  // Function to place a bid
  const placeBid = async () => {
    if (!auction || !auction.players || !user) return;
    
    setBidError('');
    setBidSuccess('');
    setBidding(true);
    
    try {
      const currentPlayer = auction.players[currentPlayerIndex];
      
      // Validate bid amount
      if (!bidAmount || isNaN(parseFloat(bidAmount))) {
        setBidError('Please enter a valid bid amount');
        setBidding(false);
        return;
      }
      
      const bidAmountNum = parseFloat(bidAmount);
      
      // Check if bid is higher than base price
      if (bidAmountNum < (currentPlayer.basePrice || auction.baseValue)) {
        setBidError(`Bid must be at least ${currentPlayer.basePrice || auction.baseValue}`);
        setBidding(false);
        return;
      }
      
      // Check if bidder has enough funds
      if (isBidder() && bidAmountNum > user.funds) {
        setBidError(`Not enough funds. You have ${user.funds} available.`);
        setBidding(false);
        return;
      }
      
      // Check for highest bid
      const highestBidResponse = await fetch(`/api/bids?auctionId=${id}&playerId=${currentPlayer._id}&highest=true`);
      const highestBidData = await highestBidResponse.json();
      const highestBid = highestBidData.bid;
      
      if (highestBid && bidAmountNum <= highestBid.amount) {
        setBidError(`Bid must be higher than the current highest bid: ${highestBid.amount}`);
        setBidding(false);
        return;
      }
      
      // Create the bid
      const newBid = {
        auctionId: id,
        playerId: currentPlayer._id,
        playerName: currentPlayer.name,
        userId: user._id,
        userName: user.name,
        amount: bidAmountNum,
        timestamp: new Date().toISOString()
      };
      
      const bidResponse = await fetch('/api/bids', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(newBid)
      });
      
      if (!bidResponse.ok) {
        throw new Error('Failed to place bid');
      }
      
      // Update user funds if it's a bidder
      if (isBidder()) {
        const newFunds = user.funds - bidAmountNum;
        await updateFunds(newFunds);
      }
      
      // Update bid history
      const updatedBidsResponse = await fetch(`/api/bids?auctionId=${id}`);
      const updatedBidsData = await updatedBidsResponse.json();
      setBids(updatedBidsData.bids || []);
      
      setBidSuccess(`Successfully placed bid of $${bidAmountNum}`);
    } catch (err) {
      setBidError('Failed to place bid');
      console.error(err);
    } finally {
      setBidding(false);
    }
  };

  // Function to finalize a player (mark as sold to highest bidder)
  const finalizePlayer = async () => {
    if (!auction || !auction.players) return;
    
    try {
      const currentPlayer = auction.players[currentPlayerIndex];
      
      // Get highest bid for this player
      const highestBidResponse = await fetch(`/api/bids?auctionId=${id}&playerId=${currentPlayer._id}&highest=true`);
      const highestBidData = await highestBidResponse.json();
      const highestBid = highestBidData.bid;
      
      if (!highestBid) {
        setError('No bids found for this player');
        return;
      }
      
      // Update player status in the auction
      const updatedPlayer = {
        ...currentPlayer,
        status: 'sold',
        soldTo: highestBid.userId,
        soldToName: highestBid.userName,
        soldAmount: highestBid.amount
      };
      
      const updatedPlayers = [...auction.players];
      updatedPlayers[currentPlayerIndex] = updatedPlayer;
      
      const response = await fetch(`/api/auctions/${id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ players: updatedPlayers })
      });
      
      if (!response.ok) {
        throw new Error('Failed to update player status');
      }
      
      // Update local state
      setAuction({
        ...auction,
        players: updatedPlayers
      });
      
      // Add player to buyer's team
      if (user._id === highestBid.userId) {
        addPlayer({
          id: currentPlayer._id,
          name: currentPlayer.name,
          price: highestBid.amount,
          auctionId: id,
          auctionName: auction.name,
          image: currentPlayer.image
        });
      }
      
      setBidSuccess(`Player ${currentPlayer.name} sold to ${highestBid.userName} for $${highestBid.amount}`);
      
      // Move to next player automatically
      if (currentPlayerIndex < auction.players.length - 1) {
        setTimeout(nextPlayer, 2000);
      }
    } catch (err) {
      setError('Failed to finalize player');
      console.error(err);
    }
  };
  
  // Function to set bidder budget
  const handleSetBudget = async () => {
    if (!auction || !isAdmin()) return;
    
    try {
      const budget = parseFloat(budgetAmount);
      
      if (isNaN(budget) || budget <= 0) {
        setError('Please enter a valid budget amount');
        return;
      }
      
      const response = await fetch(`/api/auctions/${id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ bidderBudget: budget })
      });
      
      if (!response.ok) {
        throw new Error('Failed to update bidder budget');
      }
      
      setAuction({
        ...auction,
        bidderBudget: budget
      });
      
      setBidSuccess(`Bidder budget set to $${budget}`);
    } catch (err) {
      setError('Failed to set bidder budget');
      console.error(err);
    }
  };
  
  // Function to toggle auction visibility
  const toggleVisibility = async () => {
    if (!auction || !isAdmin()) return;
    
    try {
      const newVisibility = !visibilityStatus;
      
      const response = await fetch(`/api/auctions/${id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ isPublic: newVisibility })
      });
      
      if (!response.ok) {
        throw new Error('Failed to update auction visibility');
      }
      
      setVisibilityStatus(newVisibility);
      setAuction({
        ...auction,
        isPublic: newVisibility
      });
      
      setBidSuccess(`Auction is now ${newVisibility ? 'public' : 'private'}`);
    } catch (err) {
      setError('Failed to toggle visibility');
      console.error(err);
    }
  };
  
  // Function to set budget for a specific bidder
  const setBidderBudgetForUser = async (userId, budget) => {
    if (!auction || !isAdmin()) return;
    
    try {
      const response = await fetch(`/api/users/${userId}/funds`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ funds: budget })
      });
      
      if (!response.ok) {
        throw new Error('Failed to update bidder budget');
      }
      
      setBidSuccess(`Updated budget for user successfully`);
    } catch (err) {
      setError('Failed to set budget for user');
      console.error(err);
    }
  };

  if (loading) {
    return (
      <div>
        <AuthenticatedNavbar />
        <div className="container mx-auto py-24 text-center">
          <p>Loading auction data...</p>
        </div>
        <Footer />
      </div>
    );
  }

  if (error) {
    return (
      <div>
        <AuthenticatedNavbar />
        <div className="container mx-auto py-24 text-center">
          <p className="text-red-500">{error}</p>
        </div>
        <Footer />
      </div>
    );
  }

  if (!auction) {
    return (
      <div>
        <AuthenticatedNavbar />
        <div className="container mx-auto py-24 text-center">
          <p>Auction not found</p>
        </div>
        <Footer />
      </div>
    );
  }

  const currentPlayer = auction.players[currentPlayerIndex];

  return (
    <div>
      <AuthenticatedNavbar />
      
      <div className="container mx-auto py-8 px-4">
        <h1 className="text-3xl font-bold mb-2">{auction.name}</h1>
        <p className="text-[#6b7280] mb-8">{auction.description}</p>
        
        {/* User Funds Display */}
        {user && (
          <div className="max-w-md mb-6 bg-green-50 p-4 rounded-lg shadow border border-green-200">
            <div className="flex justify-between items-center">
              <span className="text-green-800 font-medium">Your Available Funds:</span>
              <span className="text-green-700 font-bold text-xl">${user.funds}</span>
            </div>
          </div>
        )}
        
        {/* Admin Controls */}
        {isAdmin() && (
          <div className="mb-8 p-6 bg-[#f3f4f6] rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4">Admin Controls</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Set Bidder Budget */}
              <div>
                <h3 className="text-md font-medium mb-2">Set Default Bidder Budget</h3>
                <div className="flex space-x-2">
                  <input
                    type="number"
                    className="input-field"
                    placeholder="Budget amount"
                    value={budgetAmount}
                    onChange={(e) => setBudgetAmount(e.target.value)}
                  />
                  <button 
                    className="primary-btn"
                    onClick={handleSetBudget}
                  >
                    Set Budget
                  </button>
                </div>
              </div>
              
              {/* Toggle Auction Visibility */}
              <div>
                <h3 className="text-md font-medium mb-2">Auction Visibility</h3>
                <div className="flex items-center space-x-2">
                  <span className="text-[#6b7280]">Current: {visibilityStatus ? 'Public' : 'Private'}</span>
                  <button 
                    className={`py-2 px-4 rounded-md ${visibilityStatus ? 'bg-red-500 hover:bg-red-600' : 'bg-green-500 hover:bg-green-600'} text-white`}
                    onClick={toggleVisibility}
                  >
                    Make {visibilityStatus ? 'Private' : 'Public'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* Current Player Section */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
          <div className="lg:col-span-2">
            <div className="bg-white p-6 rounded-lg shadow-md">
              <div className="flex justify-between items-start mb-4">
                <h2 className="text-2xl font-bold">Current Player</h2>
                <div className="text-sm text-[#6b7280]">
                  Player {currentPlayerIndex + 1} of {auction.players.length}
                </div>
              </div>
              
              {currentPlayer ? (
                <div>
                  <div className="flex items-center mb-4">
                    {currentPlayer.image && (
                      <img 
                        src={currentPlayer.image} 
                        alt={currentPlayer.name} 
                        className="w-24 h-24 object-cover rounded-full mr-4 border-2 border-[#e5e7eb]"
                      />
                    )}
                    <div>
                      <h3 className="text-xl font-bold">{currentPlayer.name}</h3>
                      <p className="text-[#6b7280]">Base Price: ${currentPlayer.basePrice || auction.baseValue}</p>
                      {currentPlayer.status === 'sold' && (
                        <div className="mt-2 text-green-600">
                          <span className="font-medium">Sold to {currentPlayer.soldToName} for ${currentPlayer.soldAmount}</span>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  {/* Bidding Form */}
                  {currentPlayer.status === 'pending' && (
                    <div className="mt-4">
                      {bidError && (
                        <div className="mb-4 p-3 bg-[#fee2e2] text-[#b91c1c] rounded-md text-sm">
                          {bidError}
                        </div>
                      )}
                      
                      {bidSuccess && (
                        <div className="mb-4 p-3 bg-[#ecfdf5] text-[#047857] rounded-md text-sm">
                          {bidSuccess}
                        </div>
                      )}
                      
                      <div className="flex space-x-2">
                        <input
                          type="number"
                          className="input-field"
                          placeholder="Your bid amount"
                          value={bidAmount}
                          onChange={(e) => setBidAmount(e.target.value)}
                        />
                        <button 
                          className="primary-btn"
                          onClick={placeBid}
                          disabled={bidding}
                        >
                          {bidding ? 'Placing Bid...' : 'Place Bid'}
                        </button>
                      </div>
                      
                      {isAdmin() && (
                        <button 
                          className="mt-4 py-2 px-4 bg-[#1e40af] hover:bg-[#1e3a8a] text-white rounded-md w-full"
                          onClick={finalizePlayer}
                        >
                          Finalize Bidding for this Player
                        </button>
                      )}
                    </div>
                  )}
                </div>
              ) : (
                <p>No player information available</p>
              )}
            </div>
            
            {/* Player Navigation */}
            {isAdmin() && (
              <div className="mt-4 flex justify-between">
                <button 
                  className="py-2 px-4 bg-[#6b7280] hover:bg-[#4b5563] text-white rounded-md"
                  onClick={previousPlayer}
                  disabled={currentPlayerIndex === 0}
                >
                  Previous Player
                </button>
                <button 
                  className="py-2 px-4 bg-[#6b7280] hover:bg-[#4b5563] text-white rounded-md"
                  onClick={nextPlayer}
                  disabled={currentPlayerIndex >= auction.players.length - 1}
                >
                  Next Player
                </button>
              </div>
            )}
          </div>
          
          {/* Bid History */}
          <div>
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-xl font-bold mb-4">Bid History</h2>
              
              {bids.length > 0 ? (
                <div className="max-h-80 overflow-y-auto">
                  {bids
                    .filter(bid => bid.playerId === currentPlayer._id)
                    .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
                    .map(bid => (
                      <div 
                        key={bid._id} 
                        className="border-b border-[#f3f4f6] py-2"
                      >
                        <div className="flex justify-between">
                          <span className="font-medium">{bid.userName}</span>
                          <span className="text-[#1e40af]">${bid.amount}</span>
                        </div>
                        <div className="text-xs text-[#6b7280]">
                          {new Date(bid.timestamp).toLocaleString()}
                        </div>
                      </div>
                    ))
                  }
                </div>
              ) : (
                <p className="text-[#6b7280]">No bids yet</p>
              )}
            </div>
          </div>
        </div>
        
        {/* All Players List */}
        <div className="mb-8">
          <h2 className="text-2xl font-bold mb-4">All Players</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {auction.players.map((player, index) => (
              <div 
                key={player._id} 
                className={`
                  p-4 rounded-lg shadow-md border 
                  ${index === currentPlayerIndex ? 'border-[#1e40af] bg-[#eff6ff]' : 'border-[#e5e7eb] bg-white'}
                `}
              >
                <div className="flex items-center">
                  {player.image && (
                    <img 
                      src={player.image} 
                      alt={player.name} 
                      className="w-12 h-12 object-cover rounded-full mr-3 border border-[#e5e7eb]"
                    />
                  )}
                  <div>
                    <h3 className="font-medium">{player.name}</h3>
                    <p className="text-sm text-[#6b7280]">Base: ${player.basePrice || auction.baseValue}</p>
                    
                    {player.status === 'sold' ? (
                      <p className="text-sm text-green-600">
                        Sold to {player.soldToName} for ${player.soldAmount}
                      </p>
                    ) : (
                      <p className="text-sm text-[#6b7280]">
                        Status: {player.status}
                      </p>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
      
      <Footer />
    </div>
  );
}